# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'
_M_SmartHome.__doc__ = """
Jorge Silva
"""

_M_SmartHome._t_Iluminacion = IcePy.defineValue('::SmartHome::Iluminacion', Ice.Value, -1, (), False, True, None, ())

if 'IluminacionPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IluminacionPrx = Ice.createTempClass()
    class IluminacionPrx(Ice.ObjectPrx):

        def encenderLampara(self, idDorm, idLamp, context=None):
            return _M_SmartHome.Iluminacion._op_encenderLampara.invoke(self, ((idDorm, idLamp), context))

        def encenderLamparaAsync(self, idDorm, idLamp, context=None):
            return _M_SmartHome.Iluminacion._op_encenderLampara.invokeAsync(self, ((idDorm, idLamp), context))

        def begin_encenderLampara(self, idDorm, idLamp, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Iluminacion._op_encenderLampara.begin(self, ((idDorm, idLamp), _response, _ex, _sent, context))

        def end_encenderLampara(self, _r):
            return _M_SmartHome.Iluminacion._op_encenderLampara.end(self, _r)

        def apagarLampara(self, idDorm, idLamp, context=None):
            return _M_SmartHome.Iluminacion._op_apagarLampara.invoke(self, ((idDorm, idLamp), context))

        def apagarLamparaAsync(self, idDorm, idLamp, context=None):
            return _M_SmartHome.Iluminacion._op_apagarLampara.invokeAsync(self, ((idDorm, idLamp), context))

        def begin_apagarLampara(self, idDorm, idLamp, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Iluminacion._op_apagarLampara.begin(self, ((idDorm, idLamp), _response, _ex, _sent, context))

        def end_apagarLampara(self, _r):
            return _M_SmartHome.Iluminacion._op_apagarLampara.end(self, _r)

        def obtenerTH(self, context=None):
            return _M_SmartHome.Iluminacion._op_obtenerTH.invoke(self, ((), context))

        def obtenerTHAsync(self, context=None):
            return _M_SmartHome.Iluminacion._op_obtenerTH.invokeAsync(self, ((), context))

        def begin_obtenerTH(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Iluminacion._op_obtenerTH.begin(self, ((), _response, _ex, _sent, context))

        def end_obtenerTH(self, _r):
            return _M_SmartHome.Iluminacion._op_obtenerTH.end(self, _r)

        def obtenerCicloTH(self, context=None):
            return _M_SmartHome.Iluminacion._op_obtenerCicloTH.invoke(self, ((), context))

        def obtenerCicloTHAsync(self, context=None):
            return _M_SmartHome.Iluminacion._op_obtenerCicloTH.invokeAsync(self, ((), context))

        def begin_obtenerCicloTH(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Iluminacion._op_obtenerCicloTH.begin(self, ((), _response, _ex, _sent, context))

        def end_obtenerCicloTH(self, _r):
            return _M_SmartHome.Iluminacion._op_obtenerCicloTH.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IluminacionPrx.ice_checkedCast(proxy, '::SmartHome::Iluminacion', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IluminacionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Iluminacion'
    _M_SmartHome._t_IluminacionPrx = IcePy.defineProxy('::SmartHome::Iluminacion', IluminacionPrx)

    _M_SmartHome.IluminacionPrx = IluminacionPrx
    del IluminacionPrx

    _M_SmartHome.Iluminacion = Ice.createTempClass()
    class Iluminacion(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Iluminacion')

        def ice_id(self, current=None):
            return '::SmartHome::Iluminacion'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Iluminacion'

        def encenderLampara(self, idDorm, idLamp, current=None):
            raise NotImplementedError("servant method 'encenderLampara' not implemented")

        def apagarLampara(self, idDorm, idLamp, current=None):
            raise NotImplementedError("servant method 'apagarLampara' not implemented")

        def obtenerTH(self, current=None):
            raise NotImplementedError("servant method 'obtenerTH' not implemented")

        def obtenerCicloTH(self, current=None):
            raise NotImplementedError("servant method 'obtenerCicloTH' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IluminacionDisp)

        __repr__ = __str__

    _M_SmartHome._t_IluminacionDisp = IcePy.defineClass('::SmartHome::Iluminacion', Iluminacion, (), None, ())
    Iluminacion._ice_type = _M_SmartHome._t_IluminacionDisp

    Iluminacion._op_encenderLampara = IcePy.Operation('encenderLampara', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Iluminacion._op_apagarLampara = IcePy.Operation('apagarLampara', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Iluminacion._op_obtenerTH = IcePy.Operation('obtenerTH', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Iluminacion._op_obtenerCicloTH = IcePy.Operation('obtenerCicloTH', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHome.Iluminacion = Iluminacion
    del Iluminacion

# End of module SmartHome
