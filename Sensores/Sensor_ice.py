# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `Sensor.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PySensor
_M_PySensor = Ice.openModule('PySensor')
__name__ = 'PySensor'

_M_PySensor._t_Sensors = IcePy.defineValue('::PySensor::Sensors', Ice.Value, -1, (), False, True, None, ())

if 'SensorsPrx' not in _M_PySensor.__dict__:
    _M_PySensor.SensorsPrx = Ice.createTempClass()
    class SensorsPrx(Ice.ObjectPrx):

        def sendTemperature(self, context=None):
            return _M_PySensor.Sensors._op_sendTemperature.invoke(self, ((), context))

        def sendTemperatureAsync(self, context=None):
            return _M_PySensor.Sensors._op_sendTemperature.invokeAsync(self, ((), context))

        def begin_sendTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PySensor.Sensors._op_sendTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_sendTemperature(self, _r):
            return _M_PySensor.Sensors._op_sendTemperature.end(self, _r)

        def sendHumidity(self, context=None):
            return _M_PySensor.Sensors._op_sendHumidity.invoke(self, ((), context))

        def sendHumidityAsync(self, context=None):
            return _M_PySensor.Sensors._op_sendHumidity.invokeAsync(self, ((), context))

        def begin_sendHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PySensor.Sensors._op_sendHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_sendHumidity(self, _r):
            return _M_PySensor.Sensors._op_sendHumidity.end(self, _r)

        def sendGas(self, context=None):
            return _M_PySensor.Sensors._op_sendGas.invoke(self, ((), context))

        def sendGasAsync(self, context=None):
            return _M_PySensor.Sensors._op_sendGas.invokeAsync(self, ((), context))

        def begin_sendGas(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PySensor.Sensors._op_sendGas.begin(self, ((), _response, _ex, _sent, context))

        def end_sendGas(self, _r):
            return _M_PySensor.Sensors._op_sendGas.end(self, _r)

        def sendLuminity(self, context=None):
            return _M_PySensor.Sensors._op_sendLuminity.invoke(self, ((), context))

        def sendLuminityAsync(self, context=None):
            return _M_PySensor.Sensors._op_sendLuminity.invokeAsync(self, ((), context))

        def begin_sendLuminity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PySensor.Sensors._op_sendLuminity.begin(self, ((), _response, _ex, _sent, context))

        def end_sendLuminity(self, _r):
            return _M_PySensor.Sensors._op_sendLuminity.end(self, _r)

        def sendMovement(self, context=None):
            return _M_PySensor.Sensors._op_sendMovement.invoke(self, ((), context))

        def sendMovementAsync(self, context=None):
            return _M_PySensor.Sensors._op_sendMovement.invokeAsync(self, ((), context))

        def begin_sendMovement(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PySensor.Sensors._op_sendMovement.begin(self, ((), _response, _ex, _sent, context))

        def end_sendMovement(self, _r):
            return _M_PySensor.Sensors._op_sendMovement.end(self, _r)

        def isWindowsOpen(self, context=None):
            return _M_PySensor.Sensors._op_isWindowsOpen.invoke(self, ((), context))

        def isWindowsOpenAsync(self, context=None):
            return _M_PySensor.Sensors._op_isWindowsOpen.invokeAsync(self, ((), context))

        def begin_isWindowsOpen(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PySensor.Sensors._op_isWindowsOpen.begin(self, ((), _response, _ex, _sent, context))

        def end_isWindowsOpen(self, _r):
            return _M_PySensor.Sensors._op_isWindowsOpen.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PySensor.SensorsPrx.ice_checkedCast(proxy, '::PySensor::Sensors', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PySensor.SensorsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PySensor::Sensors'
    _M_PySensor._t_SensorsPrx = IcePy.defineProxy('::PySensor::Sensors', SensorsPrx)

    _M_PySensor.SensorsPrx = SensorsPrx
    del SensorsPrx

    _M_PySensor.Sensors = Ice.createTempClass()
    class Sensors(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PySensor::Sensors')

        def ice_id(self, current=None):
            return '::PySensor::Sensors'

        @staticmethod
        def ice_staticId():
            return '::PySensor::Sensors'

        def sendTemperature(self, current=None):
            raise NotImplementedError("servant method 'sendTemperature' not implemented")

        def sendHumidity(self, current=None):
            raise NotImplementedError("servant method 'sendHumidity' not implemented")

        def sendGas(self, current=None):
            raise NotImplementedError("servant method 'sendGas' not implemented")

        def sendLuminity(self, current=None):
            raise NotImplementedError("servant method 'sendLuminity' not implemented")

        def sendMovement(self, current=None):
            raise NotImplementedError("servant method 'sendMovement' not implemented")

        def isWindowsOpen(self, current=None):
            raise NotImplementedError("servant method 'isWindowsOpen' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PySensor._t_SensorsDisp)

        __repr__ = __str__

    _M_PySensor._t_SensorsDisp = IcePy.defineClass('::PySensor::Sensors', Sensors, (), None, ())
    Sensors._ice_type = _M_PySensor._t_SensorsDisp

    Sensors._op_sendTemperature = IcePy.Operation('sendTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensors._op_sendHumidity = IcePy.Operation('sendHumidity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensors._op_sendGas = IcePy.Operation('sendGas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensors._op_sendLuminity = IcePy.Operation('sendLuminity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensors._op_sendMovement = IcePy.Operation('sendMovement', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensors._op_isWindowsOpen = IcePy.Operation('isWindowsOpen', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_PySensor.Sensors = Sensors
    del Sensors

# End of module PySensor
