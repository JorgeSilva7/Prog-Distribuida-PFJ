# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `Actuator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PyActuator
_M_PyActuator = Ice.openModule('PyActuator')
__name__ = 'PyActuator'

_M_PyActuator._t_Actuators = IcePy.defineValue('::PyActuator::Actuators', Ice.Value, -1, (), False, True, None, ())

if 'ActuatorsPrx' not in _M_PyActuator.__dict__:
    _M_PyActuator.ActuatorsPrx = Ice.createTempClass()
    class ActuatorsPrx(Ice.ObjectPrx):

        def turnOnFans(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnFans.invoke(self, ((ipDorm, timeOn), context))

        def turnOnFansAsync(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnFans.invokeAsync(self, ((ipDorm, timeOn), context))

        def begin_turnOnFans(self, ipDorm, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOnFans.begin(self, ((ipDorm, timeOn), _response, _ex, _sent, context))

        def end_turnOnFans(self, _r):
            return _M_PyActuator.Actuators._op_turnOnFans.end(self, _r)

        def turnOnExtracts(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnExtracts.invoke(self, ((ipDorm, timeOn), context))

        def turnOnExtractsAsync(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnExtracts.invokeAsync(self, ((ipDorm, timeOn), context))

        def begin_turnOnExtracts(self, ipDorm, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOnExtracts.begin(self, ((ipDorm, timeOn), _response, _ex, _sent, context))

        def end_turnOnExtracts(self, _r):
            return _M_PyActuator.Actuators._op_turnOnExtracts.end(self, _r)

        def turnOnLight(self, ipDorm, portBulb, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnLight.invoke(self, ((ipDorm, portBulb, timeOn), context))

        def turnOnLightAsync(self, ipDorm, portBulb, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnLight.invokeAsync(self, ((ipDorm, portBulb, timeOn), context))

        def begin_turnOnLight(self, ipDorm, portBulb, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOnLight.begin(self, ((ipDorm, portBulb, timeOn), _response, _ex, _sent, context))

        def end_turnOnLight(self, _r):
            return _M_PyActuator.Actuators._op_turnOnLight.end(self, _r)

        def turnOnAlarm(self, ipAlarm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnAlarm.invoke(self, ((ipAlarm, timeOn), context))

        def turnOnAlarmAsync(self, ipAlarm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOnAlarm.invokeAsync(self, ((ipAlarm, timeOn), context))

        def begin_turnOnAlarm(self, ipAlarm, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOnAlarm.begin(self, ((ipAlarm, timeOn), _response, _ex, _sent, context))

        def end_turnOnAlarm(self, _r):
            return _M_PyActuator.Actuators._op_turnOnAlarm.end(self, _r)

        def turnOnAllAlarms(self, context=None):
            return _M_PyActuator.Actuators._op_turnOnAllAlarms.invoke(self, ((), context))

        def turnOnAllAlarmsAsync(self, context=None):
            return _M_PyActuator.Actuators._op_turnOnAllAlarms.invokeAsync(self, ((), context))

        def begin_turnOnAllAlarms(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOnAllAlarms.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOnAllAlarms(self, _r):
            return _M_PyActuator.Actuators._op_turnOnAllAlarms.end(self, _r)

        def turnOffFans(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffFans.invoke(self, ((ipDorm, timeOn), context))

        def turnOffFansAsync(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffFans.invokeAsync(self, ((ipDorm, timeOn), context))

        def begin_turnOffFans(self, ipDorm, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOffFans.begin(self, ((ipDorm, timeOn), _response, _ex, _sent, context))

        def end_turnOffFans(self, _r):
            return _M_PyActuator.Actuators._op_turnOffFans.end(self, _r)

        def turnOffExtracts(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffExtracts.invoke(self, ((ipDorm, timeOn), context))

        def turnOffExtractsAsync(self, ipDorm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffExtracts.invokeAsync(self, ((ipDorm, timeOn), context))

        def begin_turnOffExtracts(self, ipDorm, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOffExtracts.begin(self, ((ipDorm, timeOn), _response, _ex, _sent, context))

        def end_turnOffExtracts(self, _r):
            return _M_PyActuator.Actuators._op_turnOffExtracts.end(self, _r)

        def turnOffLight(self, ipDorm, portBulb, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffLight.invoke(self, ((ipDorm, portBulb, timeOn), context))

        def turnOffLightAsync(self, ipDorm, portBulb, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffLight.invokeAsync(self, ((ipDorm, portBulb, timeOn), context))

        def begin_turnOffLight(self, ipDorm, portBulb, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOffLight.begin(self, ((ipDorm, portBulb, timeOn), _response, _ex, _sent, context))

        def end_turnOffLight(self, _r):
            return _M_PyActuator.Actuators._op_turnOffLight.end(self, _r)

        def turnOffAlarm(self, ipAlarm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffAlarm.invoke(self, ((ipAlarm, timeOn), context))

        def turnOffAlarmAsync(self, ipAlarm, timeOn, context=None):
            return _M_PyActuator.Actuators._op_turnOffAlarm.invokeAsync(self, ((ipAlarm, timeOn), context))

        def begin_turnOffAlarm(self, ipAlarm, timeOn, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOffAlarm.begin(self, ((ipAlarm, timeOn), _response, _ex, _sent, context))

        def end_turnOffAlarm(self, _r):
            return _M_PyActuator.Actuators._op_turnOffAlarm.end(self, _r)

        def turnOffAllAlarms(self, context=None):
            return _M_PyActuator.Actuators._op_turnOffAllAlarms.invoke(self, ((), context))

        def turnOffAllAlarmsAsync(self, context=None):
            return _M_PyActuator.Actuators._op_turnOffAllAlarms.invokeAsync(self, ((), context))

        def begin_turnOffAllAlarms(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PyActuator.Actuators._op_turnOffAllAlarms.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOffAllAlarms(self, _r):
            return _M_PyActuator.Actuators._op_turnOffAllAlarms.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PyActuator.ActuatorsPrx.ice_checkedCast(proxy, '::PyActuator::Actuators', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PyActuator.ActuatorsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PyActuator::Actuators'
    _M_PyActuator._t_ActuatorsPrx = IcePy.defineProxy('::PyActuator::Actuators', ActuatorsPrx)

    _M_PyActuator.ActuatorsPrx = ActuatorsPrx
    del ActuatorsPrx

    _M_PyActuator.Actuators = Ice.createTempClass()
    class Actuators(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PyActuator::Actuators')

        def ice_id(self, current=None):
            return '::PyActuator::Actuators'

        @staticmethod
        def ice_staticId():
            return '::PyActuator::Actuators'

        def turnOnFans(self, ipDorm, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOnFans' not implemented")

        def turnOnExtracts(self, ipDorm, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOnExtracts' not implemented")

        def turnOnLight(self, ipDorm, portBulb, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOnLight' not implemented")

        def turnOnAlarm(self, ipAlarm, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOnAlarm' not implemented")

        def turnOnAllAlarms(self, current=None):
            raise NotImplementedError("servant method 'turnOnAllAlarms' not implemented")

        def turnOffFans(self, ipDorm, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOffFans' not implemented")

        def turnOffExtracts(self, ipDorm, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOffExtracts' not implemented")

        def turnOffLight(self, ipDorm, portBulb, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOffLight' not implemented")

        def turnOffAlarm(self, ipAlarm, timeOn, current=None):
            raise NotImplementedError("servant method 'turnOffAlarm' not implemented")

        def turnOffAllAlarms(self, current=None):
            raise NotImplementedError("servant method 'turnOffAllAlarms' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PyActuator._t_ActuatorsDisp)

        __repr__ = __str__

    _M_PyActuator._t_ActuatorsDisp = IcePy.defineClass('::PyActuator::Actuators', Actuators, (), None, ())
    Actuators._ice_type = _M_PyActuator._t_ActuatorsDisp

    Actuators._op_turnOnFans = IcePy.Operation('turnOnFans', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOnExtracts = IcePy.Operation('turnOnExtracts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOnLight = IcePy.Operation('turnOnLight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOnAlarm = IcePy.Operation('turnOnAlarm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOnAllAlarms = IcePy.Operation('turnOnAllAlarms', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Actuators._op_turnOffFans = IcePy.Operation('turnOffFans', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOffExtracts = IcePy.Operation('turnOffExtracts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOffLight = IcePy.Operation('turnOffLight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOffAlarm = IcePy.Operation('turnOffAlarm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Actuators._op_turnOffAllAlarms = IcePy.Operation('turnOffAllAlarms', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_PyActuator.Actuators = Actuators
    del Actuators

# End of module PyActuator
